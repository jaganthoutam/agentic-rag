"""
Core data models for Agentic RAG.

This module defines the core data structures used throughout the Agentic RAG system,
including Query, Document, Memory, and Agent representations.
"""

import uuid
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

import pydantic


class LogLevel(str, Enum):
    """Enum for log levels."""
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


class Query(pydantic.BaseModel):
    """Represents a user query to the system."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    text: str
    timestamp: datetime = pydantic.Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary."""
        return self.model_dump()


class Document(pydantic.BaseModel):
    """Represents a document retrieved or generated by the system."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    content: str
    source: str
    timestamp: datetime = pydantic.Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary."""
        return self.model_dump()


class MemoryEntry(pydantic.BaseModel):
    """Represents an entry in the memory system."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    query_id: str
    document_ids: List[str] = pydantic.Field(default_factory=list)
    created_at: datetime = pydantic.Field(default_factory=datetime.utcnow)
    accessed_at: datetime = pydantic.Field(default_factory=datetime.utcnow)
    access_count: int = 0
    relevance_score: float = 0.0
    memory_type: str  # "short_term" or "long_term"
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary."""
        return self.model_dump()
    
    def update_access(self) -> None:
        """Update the access timestamp and count."""
        self.accessed_at = datetime.utcnow()
        self.access_count += 1


class AgentType(str, Enum):
    """Enum for agent types."""
    AGGREGATOR = "aggregator"
    SEARCH = "search"
    LOCAL_DATA = "local_data"
    CLOUD = "cloud"
    GENERATIVE = "generative"
    MEMORY = "memory"


class AgentMessage(pydantic.BaseModel):
    """Message exchanged between agents."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    sender: str
    receiver: str
    content: Union[str, Dict[str, Any]]
    timestamp: datetime = pydantic.Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)


class AgentResult(pydantic.BaseModel):
    """Result returned by an agent after processing."""
    agent_id: str
    agent_type: AgentType
    query_id: str
    documents: List[Document] = pydantic.Field(default_factory=list)
    confidence: float = 0.0
    processing_time: float  # seconds
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary."""
        return self.model_dump()


class PlanStep(pydantic.BaseModel):
    """Represents a step in an execution plan."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    plan_id: str
    agent_type: AgentType
    description: str
    status: str = "pending"  # pending, in_progress, completed, failed
    result: Optional[AgentResult] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    
    def start(self) -> None:
        """Mark the step as started."""
        self.status = "in_progress"
        self.start_time = datetime.utcnow()
    
    def complete(self, result: AgentResult) -> None:
        """Mark the step as completed with the given result."""
        self.status = "completed"
        self.result = result
        self.end_time = datetime.utcnow()
    
    def fail(self) -> None:
        """Mark the step as failed."""
        self.status = "failed"
        self.end_time = datetime.utcnow()


class Plan(pydantic.BaseModel):
    """Represents an execution plan for a query."""
    id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))
    query_id: str
    steps: List[PlanStep] = pydantic.Field(default_factory=list)
    planner_type: str  # "react" or "cot"
    created_at: datetime = pydantic.Field(default_factory=datetime.utcnow)
    status: str = "created"  # created, executing, completed, failed
    
    def add_step(self, agent_type: AgentType, description: str) -> PlanStep:
        """Add a step to the plan."""
        step = PlanStep(
            plan_id=self.id,
            agent_type=agent_type,
            description=description
        )
        self.steps.append(step)
        return step
    
    def start_execution(self) -> None:
        """Mark the plan as executing."""
        self.status = "executing"
    
    def complete(self) -> None:
        """Mark the plan as completed."""
        self.status = "completed"
    
    def fail(self) -> None:
        """Mark the plan as failed."""
        self.status = "failed"


class RagOutput(pydantic.BaseModel):
    """Final output of the Agentic RAG system."""
    query_id: str
    response: str
    documents: List[Document] = pydantic.Field(default_factory=list)
    plan_id: Optional[str] = None
    processing_time: float  # seconds
    confidence: float = 0.0
    metadata: Dict[str, Any] = pydantic.Field(default_factory=dict)
    timestamp: datetime = pydantic.Field(default_factory=datetime.utcnow)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary."""
        return self.model_dump()