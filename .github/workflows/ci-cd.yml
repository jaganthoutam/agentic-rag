name: Agentic RAG CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.10.17]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check .
    
    - name: Check imports with isort
      run: |
        isort --check-only --profile black .
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:latest,${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:buildcache,mode=max

  deploy-staging:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Deploy to staging
      run: |
        # Update deployment image
        kubectl set image deployment/agentic-rag agentic-rag=${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:${{ github.sha }} -n staging
        # Wait for deployment to roll out
        kubectl rollout status deployment/agentic-rag -n staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be available
        sleep 30
        # Run basic health check
        STAGING_URL="https://agentic-rag.staging.example.com"
        curl -f "${STAGING_URL}/health" || exit 1
        # Run simple query test
        curl -f -X POST "${STAGING_URL}/query" \
          -H "Content-Type: application/json" \
          -d '{"text": "Test query", "metadata": {"source": "ci"}}' || exit 1

  deploy-production:
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Deploy to production
      run: |
        # Update deployment image
        kubectl set image deployment/agentic-rag agentic-rag=${{ secrets.DOCKER_HUB_USERNAME }}/agentic-rag:${{ github.sha }} -n production
        # Wait for deployment to roll out
        kubectl rollout status deployment/agentic-rag -n production --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be available
        sleep 30
        # Run basic health check
        PROD_URL="https://agentic-rag.example.com"
        curl -f "${PROD_URL}/health" || exit 1
        # Run simple query test
        curl -f -X POST "${PROD_URL}/query" \
          -H "Content-Type: application/json" \
          -d '{"text": "Test query", "metadata": {"source": "ci"}}' || exit 1

  slack-notification:
    needs: [deploy-production]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()